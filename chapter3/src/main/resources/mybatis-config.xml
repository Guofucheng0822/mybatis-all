<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <properties resource="application.properties">
    </properties>

    <!-- 定义别名 -->
    <typeAliases>
        <typeAlias alias="role" type="com.pers.gfc.chapter3.po.Role"/>
    </typeAliases>

    <typeHandlers>
        <!--配置SexEnum自定义处理器-->
            <typeHandler handler="com.pers.gfc.chapter3.typeHandle.SexEnum2TypeHandler" javaType="com.pers.gfc.chapter3.po.SexEnum2" />
            <!--<typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler" javaType="com.pers.gfc.chapter3.po.SexEnum" />-->
        <package name="com.pers.gfc.chapter3.typeHandle"/>
    </typeHandlers>
    <!--自定义ObjectFactory-->
    <objectFactory type="com.pers.gfc.chapter3.factory.MyObjectFactory">
        <property name="name" value="MyObjectFactory"/>
    </objectFactory>
    <!-- 定义数据库信息.默认使用development数据库构建环境 -->
    <environments default="development">
        <environment id="development">
            <!-- 采用jdbc事务管理
            在MyBatis中有两种类型的事务管理器（也就是type=“[JDBC|MANAGED]”）：
        ·JDBC – 这个配置就是直接使用了JDBC的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。
        **************************************************************************************
        ·MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如JEE应用服务器的上下文）。默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将closeConnection属性设置为false来阻止它默认的关闭行为。
        在JNDI数据源中常用
        <transactionManager type="MANAGED">
        <property name="closeConnection" value="false"/>
        </transactionManager>
         *************************************************************************************
        ·自定义事务管理器 -适用于特殊的需求
         如果使用spring+MyBatis，则没有必要配置事务管理器，因为spring模块会使用自带的管理器来覆盖前面的配置。
         TransactionFactory+Transaction 使用这两个接口，可以完全自定义MyBatis对事物的处理。
           -->
            <transactionManager type="JDBC">
                <property name="autoCommit" value="false"/>
            </transactionManager>
            <!--1.UNPOOLED 非连接池数据库
                2.POOLED 连接池数据库
                3.JNDI JNDI数据源
                4.自定义数据源  如DBCP、Druid  需要实现DateSourceFactory，然后配置
            -->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
                <!--<property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis_all_all?useSSL=false&amp;serverTimezone=UTC"/>
                <property name="username" value="root"/>
                <property name="password" value="root"/>-->
            </dataSource>
        </environment>
    </environments>
    <databaseIdProvider type="">

    </databaseIdProvider>

    <!-- 定义映射器 -->
    <mappers>
        <mapper resource="com/pers/gfc/chapter3/mapper/roleMapper.xml"/>
        <mapper resource="com/pers/gfc/chapter3/mapper/userMapper.xml"/>
    </mappers>
</configuration>